$(document).ready(function(){

  //open new client-side websocket
  var socket = new WebSocket("ws://localhost:8081");

  //Just preparing some variables that will be populated below
  var role
  var opp_role

  //Client makes a move
  $('.square').click(function(){
    //Ensures the selected square is not already taken
    if(!($(this).hasClass('x')) 
    && !($(this).hasClass('o'))
    //If the server has 'locked' the playboard, it will not respond to user clicks
    && !($(this).parent().hasClass('locked'))
    ){
      $('<div>' + role + '</div>').appendTo(this);
      $(this).addClass(role);
      $(this).parent().addClass('locked');
      //Send message to server with 
      socket.send('{"move": "' + $(this).attr('data-box') + '", "role": "' + role + '"}')
    }
  });

  socket.onmessage = function(message){
    //receive number of opponent's chosen square from client
    var server_data = JSON.parse(message.data)
    if(server_data.notification){
      alert(server_data.notification)
    }
    if(server_data.role_assign){
      role = server_data.role_assign
      if(role == "x"){
        opp_role = "o";
      }
      else{
        opp_role = "x";
      }
    }
    if(server_data.unlock){
      $(document).find("#grid").removeClass('locked');
    }
    if(server_data.opp_move){
      //Add the correct symbol to the relevant div
      var selected_box = $(document).find("[data-box=" + server_data.opp_move + "]")
      selected_box.text(opp_role)
      selected_box.addClass(opp_role)
      $(document).find("#grid").removeClass('locked');
    }
  };
});



// Two clients join the game
// Waiting message for first client until client two joins
// First client plays as x, second as o
// Server informs first client that second client has joined
// Server gives control to first client.
// First client clicks a space.
// If the space does not have a class of 'x-move' or 'o-move'...
// The browser displays an x and sends the space name to the server.